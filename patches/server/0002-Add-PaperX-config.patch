From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mattcc <matt.fr1kin@gmail.com>
Date: Mon, 14 Feb 2022 17:07:18 -0600
Subject: [PATCH] Add PaperX config


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 38a0fb9a7c4ade9cacfd30dffabfea7e6b773981..bdfc503266749ba54595ae2a9bdb0f0fd3eddf5f 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -6,10 +6,8 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
-import java.io.BufferedReader;
-import java.io.BufferedWriter;
-import java.io.IOException;
-import java.io.InputStreamReader;
+
+import java.io.*;
 import java.net.InetAddress;
 import java.net.Proxy;
 import java.nio.charset.StandardCharsets;
@@ -233,6 +231,10 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
 
+        // PaperX start
+        space.nerdsin.paperx.PaperXConfig.getInstance().init((File) options.valueOf("paperx-settings"));
+        // PaperX end
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index f810bebfca3932c80e20646eb0680f7718506707..5a6458eeb128bab25de668775216be19b5f5f4f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -160,6 +160,14 @@ public class Main {
                         .defaultsTo("Unknown Server")
                         .describedAs("Name");
                 // Paper end
+
+                // PaperX start
+                acceptsAll(asList("paperx", "paperx-settings"), "File for paperx settings")
+                    .withRequiredArg()
+                    .ofType(File.class)
+                    .defaultsTo(new File("paperx.yml"))
+                    .describedAs("Yml file");
+                // PaperX end
             }
         };
 
diff --git a/src/main/java/space/nerdsin/paperx/PaperXConfig.java b/src/main/java/space/nerdsin/paperx/PaperXConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..049fa3d2eb4f3068455c5d77f7376a172b11eab7
--- /dev/null
+++ b/src/main/java/space/nerdsin/paperx/PaperXConfig.java
@@ -0,0 +1,89 @@
+package space.nerdsin.paperx;
+
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import java.lang.reflect.Field;
+import java.util.Arrays;
+import java.util.logging.Level;
+
+public final class PaperXConfig {
+  private static final PaperXConfig INSTANCE = new PaperXConfig();
+
+  public static PaperXConfig getInstance() {
+    return INSTANCE;
+  }
+
+  private final YamlConfiguration yaml = new YamlConfiguration();
+  private File config;
+
+  private PaperXConfig() {
+    for (Field field : getClass().getDeclaredFields()) {
+      if (field.isAnnotationPresent(Setting.class)) {
+        Setting setting = field.getAnnotation(Setting.class);
+        field.setAccessible(true);
+        try {
+          // store the default value
+          yaml.addDefault("paperx." + setting.value(), field.get(this));
+        } catch (IllegalAccessException e) {
+          Bukkit.getLogger().log(Level.WARNING, "Failed to read field setting \"" + field.getName() + "\"", e);
+        }
+      }
+    }
+  }
+
+  public void init(File config) {
+    this.config = config;
+
+    if (config.exists()) {
+      this.load();
+    }
+
+    this.save();
+  }
+
+  public void load() {
+    try {
+      yaml.load(config);
+
+      yaml.options().header("PaperX configuration file");
+      yaml.options().copyDefaults(true);
+
+      Arrays.stream(getClass().getDeclaredFields())
+          .filter(field -> field.isAnnotationPresent(Setting.class))
+          .forEach(field -> {
+            Setting setting = field.getAnnotation(Setting.class);
+            try {
+              field.set(PaperXConfig.this, yaml.getObject("paperx." + setting.value(), field.getType()));
+            } catch (IllegalAccessException e) {
+              Bukkit.getLogger().log(Level.WARNING, "Failed to set value for setting \"" + field.getName() + "\"", e);
+            }
+          });
+
+    } catch (IOException | InvalidConfigurationException e) {
+      Bukkit.getLogger().severe("Unable to load PaperX configuration file");
+      throw new Error(e);
+    }
+  }
+
+  public void save() {
+    try {
+      yaml.save(config);
+    } catch (IOException e) {
+      Bukkit.getLogger().log(Level.WARNING, "Failed to save PaperX configuration file");
+    }
+  }
+
+  @Target({ElementType.FIELD})
+  @Retention(RetentionPolicy.RUNTIME)
+  @interface Setting {
+    String value();
+  }
+}
